#!/usr/bin/env python3
# SPDX-FileCopyrightText: (C) 2025 Gay Pizza Specifications <gay.pizza>
# SPDX-License-Identifier: Zlib OR 0BSD

import sys
from pathlib import Path
import re
from typing import TextIO, Iterator
from collections import namedtuple


sdl_uint64c_pattern = re.compile(r"#define\s+(\w+)\s+SDL_UINT64_C\((\w+)\)\s+/\*(.+)\*/")

HeaderSection = namedtuple("HeaderSection", ["name"])
HeaderUInt64C = namedtuple("HeaderSection", ["name", "value", "docstring"])


def foreach_headers(headers: Path) -> Iterator[HeaderSection | HeaderUInt64C]:
  for h in sorted(headers.glob("**/*.h")):
    with h.open("r") as hfile:
      has_matches = False
      for line in hfile:
        m = sdl_uint64c_pattern.match(line)
        if m is not None:
          if not has_matches:
            yield HeaderSection(h.name)
            has_matches = True
          yield HeaderUInt64C(*m.group(1, 2, 3))


def generate_shim(shim: TextIO | Path, headers: Path):
  if isinstance(shim, Path):
    with shim.open("w") as f:
      generate_shim(f, headers)
      return

  shim.write("#include <SDL3/SDL.h>\n")
  for line in foreach_headers(headers):
    if isinstance(line, HeaderSection):
      shim.write(f"\n/* {line.name} */\n")
    elif isinstance(line, HeaderUInt64C):
      shim.writelines([
        f"#undef {line.name}\n",
        f"#define {line.name} {line.value}ul  /*{line.docstring}*/\n"])


def generate_wrapper(wrapper: Path, headers: Path):
  with wrapper.open("w") as out:
    out.write(f"/* Autogenerated by '{Path(sys.argv[0]).name}' */\n")
    out.writelines([
      "#if os(macOS)\n",
      "@_exported import SDL3\n",
      "#else\n",
      "@_exported import CSDL3\n",
      "#endif\n"])
    for line in foreach_headers(headers):
      if isinstance(line, HeaderSection):
        out.write(f"\n/* {line.name} */\n")
      elif isinstance(line, HeaderUInt64C):
        out.writelines([
          f"/// {line.docstring.removeprefix("*<").strip()}\n"
          f"let {line.name}: UInt64 = {line.value}\n"])


if __name__ == "__main__":
  root = Path(sys.argv[0]).resolve().parent.parent
  header_dir = root / "Frameworks/SDL3.xcframework/macos-arm64_x86_64/SDL3.framework/Versions/Current/Headers"
  generate_shim(root / "Sources/SDLSwift/shim.h", header_dir)
  generate_shim(root / "Sources/CSDL3/shim.h", header_dir)
